// @ts-nocheck
import { DICTIONARY_URLS, DEFAULT_DICTIONARIES } from "./constants";

// Simple in-memory dictionary text cache per language (speeds language swapping within a session)
const DICT_TEXT_CACHE: Map<string, string> = new Map();

/**
 * Lemmatizer class for word form reduction to base forms
 * Supports loading dictionaries from GitHub or using fallback defaults
 */
export class Lemmatizer {
    /** Initialize a new Lemmatizer instance */
    constructor(plugin?: any) {
        this.plugin = plugin || null;
        /** @type {Map<string, string>} Map of word forms to lemmas */
        this.lemmas = new Map();
        /** @type {boolean} Whether the dictionary has been successfully loaded */
        this.loaded = false;
        /** @type {string|null} Language of this lemmatizer */
        this.language = null;
        /** @type {{advancedFallback?: boolean}} Options that influence lemmatization */
        this.options = { advancedFallback: false };
        /** @type {{[k:string]: number}} Diagnostics counters for rule application */
        this.counters = {
            dictionary: 0,
            ruVerb: 0,
            ruPartGer: 0,
            ruAdj: 0,
            ruNoun: 0,
            ruFallback: 0
        };
    }

    async loadDictionary(language) {
        try {
            console.log(`üì• Loading ${language} dictionary...`);
            
            if (!language || !DICTIONARY_URLS[language]) {
                throw new Error(`Invalid language: ${language}`);
            }
            
            // Prefer LOCAL dictionary file if present in the plugin folder inside the vault
            try {
                const localText = await this.readLocalDictionary(language);
                if (localText) {
                    this.parseDictionary(localText);
                    await this.loadCustomAdditions(language);
                    // Refresh cache with local content for determinism
                    DICT_TEXT_CACHE.set(language, localText);
                    this.loaded = true;
                    this.language = language;
                    console.log(`‚úÖ ${language} dictionary loaded from LOCAL plugin folder`);
                    return;
                }
            } catch (e) {
                console.warn(`Local ${language} dictionary not available or failed to read:`, e);
            }

            // If we have cached full dictionary text, reuse it
            const cachedText = DICT_TEXT_CACHE.get(language);
            if (cachedText) {
                this.parseDictionary(cachedText);
                await this.loadCustomAdditions(language);
                this.loaded = true;
                this.language = language;
                console.log(`‚ö° Used cached ${language} dictionary text (${this.lemmas.size} entries)`);
                return;
            }

            // Try to load from GitHub first with timeout (unless user prefers local-only)
            const preferLocalOnly = !!this.plugin?.settings?.preferLocalDictionaries;
            if (!preferLocalOnly) {
            try {
                const controller = new AbortController();
                const timeoutMs = Math.max(1000, Math.min(60000, (this.plugin?.settings?.networkTimeoutMs ?? 10000)));
                const timeoutId = setTimeout(() => controller.abort(), timeoutMs);
                
                const response = await fetch(DICTIONARY_URLS[language], {
                    signal: controller.signal
                });
                clearTimeout(timeoutId);
                
                if (response.ok) {
                    const content = await response.text();
                    if (!content || content.trim().length === 0) {
                        throw new Error(`Empty dictionary content for ${language}`);
                    }
                    this.parseDictionary(content);
                    await this.loadCustomAdditions(language);
                    // Cache text for fast reloads
                    DICT_TEXT_CACHE.set(language, content);
                    console.log(`‚úÖ ${language} dictionary loaded from GitHub: ${this.lemmas.size} entries`);
                    // Persist fetched dictionary locally for offline reuse (only current language)
                    try { await this.saveLocalDictionary(language, content); } catch {}
                    this.loaded = true;
                    return;
                } else {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
            } catch (error) {
                if (error.name === 'AbortError') {
                    console.log(`‚è∞ Dictionary load timeout for ${language}, using default`);
                } else {
                    console.log(`‚ö†Ô∏è Could not load ${language} dictionary from GitHub (${error.message}), using default`);
                }
            }
            } else {
                console.log(`üåê Online fetch disabled by settings, using local/default for ${language}`);
            }

            // Fallback to default dictionary
            if (!DEFAULT_DICTIONARIES[language]) {
                throw new Error(`No default dictionary available for ${language}`);
            }
            
            this.parseDictionary(DEFAULT_DICTIONARIES[language]);
            await this.loadCustomAdditions(language);
            // Cache default text, too
            DICT_TEXT_CACHE.set(language, DEFAULT_DICTIONARIES[language]);
            console.log(`‚úÖ ${language} default dictionary loaded: ${this.lemmas.size} entries`);
            this.loaded = true;
            
        } catch (error) {
            console.error(`‚ùå Critical error loading ${language} dictionary:`, error);
            this.loaded = false;
            this.lemmas.clear();
            throw new Error(`Failed to load ${language} dictionary: ${error.message}`);
        }
        // Save language after successful load
        this.language = language;
    }

    /** Load and merge user custom lemma additions from a separate file (non-destructive) */
    async loadCustomAdditions(language: string) {
        try {
            if (!this.plugin || !this.plugin.app?.vault?.adapter) return;
            const id = this.plugin.manifest?.id || 'word-statistics-ru-en-cn';
            const folder = `.obsidian/plugins/${id}/dictionaries`;
            const fileMap: Record<string, string> = {
                russian: `${folder}/custom_russian_lemmas.txt`,
                english: `${folder}/custom_english_lemmas.txt`
            };
            const path = fileMap[language];
            if (!path) return;
            let exists = false;
            try {
                const stat = await this.plugin.app.vault.adapter.stat(path);
                exists = !!(stat && stat.exists);
            } catch {}
            if (!exists) return;
            const text = await this.plugin.app.vault.adapter.read(path);
            if (!text || typeof text !== 'string') return;
            const lines = text.split('\n');
            for (const line of lines) {
                const trimmed = line.trim();
                if (!trimmed || trimmed.startsWith('#')) continue;
                const [wf, lm] = trimmed.split('=');
                if (wf && lm) {
                    const w = wf.trim().toLowerCase();
                    const l = lm.trim().toLowerCase();
                    if (w && l) this.lemmas.set(w, l);
                }
            }
            console.log(`‚ûï Merged custom ${language} lemmas (${lines.length} lines)`);
        } catch (e) {
            console.warn('Custom additions load skipped:', e);
        }
    }

    /** Save dictionary text into the local plugin folder for the given language */
    async saveLocalDictionary(language: string, content: string): Promise<void> {
        try {
            if (!this.plugin || !this.plugin.app?.vault?.adapter) return;
            const id = this.plugin.manifest?.id || 'word-statistics-ru-en-cn';
            const folder = `.obsidian/plugins/${id}/dictionaries`;
            try {
                // Ensure folder exists
                await this.plugin.app.vault.adapter.mkdir(folder);
            } catch {}
            const fileMap: Record<string, string> = {
                russian: `${folder}/russian_lemmas.txt`,
                english: `${folder}/english_lemmas.txt`,
                chinese: `${folder}/chinese_words.txt`
            };
            const path = fileMap[language];
            if (!path) return;
            await this.plugin.app.vault.adapter.write(path, content);
            console.log(`üíæ Saved ${language} dictionary locally for offline use`);
        } catch {
            // non-fatal
        }
    }

    /** Try read dictionary from local plugin folder inside the vault (non-blocking fallback) */
    async readLocalDictionary(language: string): Promise<string|null> {
        try {
            if (!this.plugin || !this.plugin.app?.vault?.adapter) return null;
            const id = this.plugin.manifest?.id || 'word-statistics-ru-en-cn';
            const fileMap: Record<string, string> = {
                russian: `.obsidian/plugins/${id}/dictionaries/russian_lemmas.txt`,
                english: `.obsidian/plugins/${id}/dictionaries/english_lemmas.txt`,
                chinese: `.obsidian/plugins/${id}/dictionaries/chinese_words.txt`
            };
            const path = fileMap[language];
            if (!path) return null;
            // Prefer a direct read attempt (some adapters may not support stat reliably)
            try {
                const text = await this.plugin.app.vault.adapter.read(path);
                if (typeof text === 'string' && text.trim().length > 0) {
                    console.log(`üìö Found LOCAL ${language} dictionary at ${path} (${text.length} chars)`);
                    return text;
                }
            } catch (readErr) {
                // Fallback: try stat+read if available
                try {
                    const stat = await this.plugin.app.vault.adapter.stat(path);
                    if (stat && stat.exists) {
                        const text2 = await this.plugin.app.vault.adapter.read(path);
                        if (typeof text2 === 'string' && text2.trim().length > 0) {
                            console.log(`üìö Found LOCAL ${language} dictionary via stat at ${path} (${text2.length} chars)`);
                            return text2;
                        }
                    }
                } catch {}
            }
            return null;
        } catch (e) {
            return null;
        }
    }

    parseDictionary(content) {
        try {
            this.lemmas.clear();
            
            if (!content || typeof content !== 'string') {
                throw new Error('Invalid dictionary content');
            }
            
            const lines = content.split('\n');
            let parsedEntries = 0;
            let skippedLines = 0;
            
            for (let i = 0; i < lines.length; i++) {
                const line = lines[i];
                const trimmed = line.trim();
                
                // Skip comments and empty lines
                if (!trimmed || trimmed.startsWith('#')) {
                    skippedLines++;
                    continue;
                }
                
                try {
                    // Parse "wordform=lemma" format
                    const [wordform, lemma] = trimmed.split('=');
                    if (wordform && lemma) {
                        const cleanWordform = wordform.trim().toLowerCase();
                        const cleanLemma = lemma.trim().toLowerCase();
                        
                        if (cleanWordform.length > 0 && cleanLemma.length > 0) {
                            this.lemmas.set(cleanWordform, cleanLemma);
                            parsedEntries++;
                        }
                    } else if (wordform && !lemma) {
                        // For Chinese - just add the word as is
                        const cleanWordform = wordform.trim();
                        if (cleanWordform.length > 0) {
                            this.lemmas.set(cleanWordform, cleanWordform);
                            parsedEntries++;
                        }
                    }
                } catch (lineError) {
                    console.warn(`Error parsing dictionary line ${i + 1}: "${line}" - ${lineError.message}`);
                    skippedLines++;
                }
            }
            
            if (parsedEntries === 0) {
                throw new Error('No valid dictionary entries parsed');
            }
            
            console.log(`Dictionary parsed: ${parsedEntries} entries, ${skippedLines} lines skipped`);
            
        } catch (error) {
            console.error('Error parsing dictionary:', error);
            this.lemmas.clear();
            throw new Error(`Dictionary parsing failed: ${error.message}`);
        }
    }

    /**
     * Convert a word form to its lemma (base form)
     * @param {string} word - The word to lemmatize
     * @returns {string} The lemmatized word or original word if no lemma found
     */
    lemmatize(word) {
        if (!this.loaded || !word || typeof word !== 'string') {
            return word ? word.toLowerCase() : '';
        }
        
        const cleanWord = word.toLowerCase().trim();
        
        // Exact match
        if (this.lemmas.has(cleanWord)) {
            try { this.counters.dictionary++; } catch {}
            return this.lemmas.get(cleanWord);
        }
        
        // Language-specific simple fallback rules
        if (this.language === 'russian') {
            // Fallback behavior:
            // - advancedFallback === true  -> advanced heuristic rules
            // - advancedFallback === 'simple' -> simple suffix stripping
            // - otherwise (default/false/undefined) -> NO fallback, return original
            if (this.options?.advancedFallback === true) {
                return this.russianAdvancedFallbackLemma(cleanWord);
            }
            if (this.options?.advancedFallback === 'simple') {
                try { this.counters.ruFallback++; } catch {}
                return this.russianFallbackLemma(cleanWord);
            }
            // No fallback: keep as-is so users can review/add correct lemmas
            return cleanWord;
        }

        // If no lemma found, return original word in lowercase
        return cleanWord;
    }

    getStats() {
        return {
            loaded: this.loaded,
            entries: this.lemmas.size,
            counters: Object.assign({}, this.counters)
        };
    }

    // Very lightweight Russian fallback lemmatizer using common suffix stripping
    russianFallbackLemma(w: string): string {
        if (!w) return w;
        // Normalize —ë -> –µ
        let s = w.replace(/—ë/g, '–µ');
        // Handle short words quickly
        if (s.length <= 3) return s;

        // Common adjective endings
        const adj = [
            '—ã–º–∏','–∏–º–∏','–µ–≥–æ','–æ–≥–æ','–µ–º—É','–æ–º—É','–µ–µ','–æ–µ','–∞—è','—è—è','–∏–π','—ã–π','–æ–π','–∞—è','—è—è','—É—é','—é—é','–∏—Ö','—ã—Ö','—ã–º','–∏–º','–µ–º','–∏–º','–æ–º'
        ];
        // Common noun plural/case endings
        const noun = [
            '–∞–º–∏','—è–º–∏','–∞–º–∏','—è–º–∏','—å–µ–≤','–µ–≤','–æ–≤','–∞–º–∏','—è–º–∏','—è–º–∏','–∞–º–∏','—è–º–∏','–∞—Ö','—è—Ö','–∞–º','—è–º','–æ—é','–µ—é','—å—é','—å—é','–µ–π','–æ–π','–∞–º','—è–º',
            '–∏—é','—å—é','—å—é','—è–º','–∞–º','–∏–∏','–∏–∏','–∏–∏','—è—Ö','–∞—Ö','–∞–º','—è–º','—è—Ö','–∞—Ö','–∞–º','—è–º','–æ—é','–µ—é'
        ];
        // Common verb endings
        const verb = [
            '–µ—à—å','–µ—à—å—Å—è','–µ—Ç–µ','–µ—Ç–µ—Å—å','–µ–º','–µ–º—Å—è','—É—Ç','—é—Ç','—è—Ç','–∏—à—å','–∏—Ç','–∏—Ç–µ','–∏–º','–∏–ª–∏','–∏–ª–∏','–∞—Ç—å','—è—Ç—å','–∏—Ç—å','–µ—à—å','–µ—Ç','–µ—Ç–µ','–µ–º',
            '–∞–ª','–∞–ª–∞','–∞–ª–æ','–∞–ª–∏','–∏–ª—Å—è','–∞–ª–∞—Å—å','–∞–ª–∏—Å—å','–∞–ª—Å—è','–ª—Å—è','—Ç—å—Å—è','—Ç—å—Å—è','—Ç—å—Å—è','–ª—Å—è','–ª–∞—Å—å','–ª–æ—Å—å','–ª–∏—Å—å'
        ];

        const strip = (arr: string[]): string | null => {
            for (const suf of arr) {
                if (s.length > suf.length + 1 && s.endsWith(suf)) {
                    return s.slice(0, -suf.length);
                }
            }
            return null;
        };

        let base = strip(adj) || strip(noun) || strip(verb);
        if (base && base.length >= 3) return base;

        // Final fallback: drop a single trailing vowel/soft sign if present
        if (/[–∞–µ—ë–∏–æ—É—ã—ç—é—è—å]$/.test(s) && s.length > 3) {
            return s.slice(0, -1);
        }
        return s;
    }

    // Advanced Russian fallback lemmatizer with verb infinitive and common noun-case recovery
    russianAdvancedFallbackLemma(w: string): string {
        if (!w) return w;
        let s = w.replace(/—ë/g, '–µ');
        if (s.length <= 3) return s;

        // Known irregular or highly frequent alternations (very small curated set)
        const IRREGULAR: Record<string, string> = {
            // 3pl ‚Üí infinitive
            '–∏–¥—É—Ç': '–∏–¥—Ç–∏', '–µ–¥—É—Ç': '–µ—Ö–∞—Ç—å', '–≤–µ–¥—É—Ç': '–≤–µ—Å—Ç–∏', '–º–æ–≥—É—Ç': '–º–æ—á—å', '—Ö–æ—Ç—è—Ç': '—Ö–æ—Ç–µ—Ç—å',
            '–±–µ—Ä—É—Ç': '–±—Ä–∞—Ç—å', '–ø–∏—à—É—Ç': '–ø–∏—Å–∞—Ç—å', '—Ä–µ–∂—É—Ç': '—Ä–µ–∑–∞—Ç—å', '–∂–¥—É—Ç': '–∂–¥–∞—Ç—å',
            // slang/common internet verbs often used
            '—Ä–æ—Ñ–ª—è—Ç': '—Ä–æ—Ñ–ª–∏—Ç—å',
            // frequent nouns/pronouns exceptions (nominative singular restoration)
            '–¥–≤–µ—Ä–µ–π': '–¥–≤–µ—Ä—å',
            '—Å—ã–Ω–æ–≤—å—è–º–∏': '—Å—ã–Ω', '—Å—ã–Ω–æ–≤—å—è–º': '—Å—ã–Ω', '—Å—ã–Ω–æ–≤–µ–π': '—Å—ã–Ω', '—Å—ã–Ω–æ–≤—å—è—Ö': '—Å—ã–Ω',
            '–∫–æ–ø–µ–µ–∫': '–∫–æ–ø–µ–π–∫–∞',
            // numerals (compact)
            '–¥–≤—É—Ö': '–¥–≤–∞', '–¥–≤—É–º': '–¥–≤–∞', '–¥–≤—É–º—è': '–¥–≤–∞',
            '—Ç—Ä–µ—Ö': '—Ç—Ä–∏', '—Ç—Ä—ë—Ö': '—Ç—Ä–∏', '—Ç—Ä–µ–º': '—Ç—Ä–∏', '—Ç—Ä—ë–º': '—Ç—Ä–∏', '—Ç—Ä–µ–º—è': '—Ç—Ä–∏',
            '—á–µ—Ç—ã—Ä–µ—Ö': '—á–µ—Ç—ã—Ä–µ', '—á–µ—Ç—ã—Ä—ë—Ö': '—á–µ—Ç—ã—Ä–µ', '—á–µ—Ç—ã—Ä–µ–º': '—á–µ—Ç—ã—Ä–µ', '—á–µ—Ç—ã—Ä—ë–º': '—á–µ—Ç—ã—Ä–µ', '—á–µ—Ç—ã—Ä—å–º—è': '—á–µ—Ç—ã—Ä–µ',
            '–ø—è—Ç–∏': '–ø—è—Ç—å', '–ø—è—Ç—å—é': '–ø—è—Ç—å',
            '—à–µ—Å—Ç–∏': '—à–µ—Å—Ç—å', '—à–µ—Å—Ç—å—é': '—à–µ—Å—Ç—å',
            '—Å–µ–º–∏': '—Å–µ–º—å', '—Å–µ–º—å—é': '—Å–µ–º—å',
            '–≤–æ—Å—å–º–∏': '–≤–æ—Å–µ–º—å', '–≤–æ—Å—å–º—å—é': '–≤–æ—Å–µ–º—å',
            '–¥–µ–≤—è—Ç–∏': '–¥–µ–≤—è—Ç—å', '–¥–µ–≤—è—Ç—å—é': '–¥–µ–≤—è—Ç—å',
            '–¥–µ—Å—è—Ç–∏': '–¥–µ—Å—è—Ç—å', '–¥–µ—Å—è—Ç—å—é': '–¥–µ—Å—è—Ç—å',
            // pronouns (compact)
            '–Ω–µ–µ': '–æ–Ω–∞', '–Ω–µ—ë': '–æ–Ω–∞',
            '—Ç–≤–æ–∏–º': '—Ç–≤–æ–π', '—Ç–≤–æ–µ–≥–æ': '—Ç–≤–æ–π', '—Ç–≤–æ–µ–º—É': '—Ç–≤–æ–π', '—Ç–≤–æ–µ–º': '—Ç–≤–æ–π', '—Ç–≤–æ—ë–º': '—Ç–≤–æ–π', '—Ç–≤–æ–∏–º–∏': '—Ç–≤–æ–π', '—Ç–≤–æ–∏—Ö': '—Ç–≤–æ–π', '—Ç–≤–æ–π': '—Ç–≤–æ–π', '—Ç–≤–æ—è': '—Ç–≤–æ–π', '—Ç–≤–æ–µ': '—Ç–≤–æ–π', '—Ç–≤–æ—ë': '—Ç–≤–æ–π', '—Ç–≤–æ–∏': '—Ç–≤–æ–π', '—Ç–≤–æ–µ–π': '—Ç–≤–æ–π', '—Ç–≤–æ—é': '—Ç–≤–æ–π',
            '–º–æ–∏–º': '–º–æ–π', '–º–æ–µ–≥–æ': '–º–æ–π', '–º–æ–µ–º—É': '–º–æ–π', '–º–æ–µ–º': '–º–æ–π', '–º–æ—ë–º': '–º–æ–π', '–º–æ–∏–º–∏': '–º–æ–π', '–º–æ–∏—Ö': '–º–æ–π', '–º–æ–π': '–º–æ–π', '–º–æ—è': '–º–æ–π', '–º–æ–µ': '–º–æ–π', '–º–æ—ë': '–º–æ–π', '–º–æ–∏': '–º–æ–π', '–º–æ–µ–π': '–º–æ–π', '–º–æ—é': '–º–æ–π',
            // —ç—Ç–æ—Ç
            '—ç—Ç–æ—Ç': '—ç—Ç–æ—Ç', '—ç—Ç–∞': '—ç—Ç–æ—Ç', '—ç—Ç–æ': '—ç—Ç–æ—Ç', '—ç—Ç–∏': '—ç—Ç–æ—Ç', '—ç—Ç–æ–≥–æ': '—ç—Ç–æ—Ç', '—ç—Ç–æ–π': '—ç—Ç–æ—Ç', '—ç—Ç–æ–º—É': '—ç—Ç–æ—Ç', '—ç—Ç–∏–º': '—ç—Ç–æ—Ç', '—ç—Ç–æ–º': '—ç—Ç–æ—Ç', '—ç—Ç—É': '—ç—Ç–æ—Ç', '—ç—Ç–∏–º–∏': '—ç—Ç–æ—Ç', '—ç—Ç–∏—Ö': '—ç—Ç–æ—Ç',
            // –≤–µ—Å—å
            '–≤–µ—Å—å': '–≤–µ—Å—å', '–≤—Å—è': '–≤–µ—Å—å', '–≤—Å—ë': '–≤–µ—Å—å', '–≤—Å–µ': '–≤–µ—Å—å',
            '–≤—Å–µ–≥–æ': '–≤–µ—Å—å', '–≤—Å–µ–π': '–≤–µ—Å—å', '–≤—Å–µ–º—É': '–≤–µ—Å—å', '–≤—Å–µ–º': '–≤–µ—Å—å', '–≤—Å—ë–º': '–≤–µ—Å—å', '–≤—Å–µ—Ö': '–≤–µ—Å—å', '–≤—Å–µ–º–∏': '–≤–µ—Å—å', '–≤—Å—é': '–≤–µ—Å—å',
            // —Å–≤–æ–π
            '—Å–≤–æ–π': '—Å–≤–æ–π', '—Å–≤–æ—è': '—Å–≤–æ–π', '—Å–≤–æ—ë': '—Å–≤–æ–π', '—Å–≤–æ–µ': '—Å–≤–æ–π', '—Å–≤–æ–∏': '—Å–≤–æ–π', '—Å–≤–æ–µ–≥–æ': '—Å–≤–æ–π', '—Å–≤–æ–µ–π': '—Å–≤–æ–π', '—Å–≤–æ–µ–º—É': '—Å–≤–æ–π', '—Å–≤–æ—ë–º': '—Å–≤–æ–π', '—Å–≤–æ–µ–º': '—Å–≤–æ–π', '—Å–≤–æ–∏–º': '—Å–≤–æ–π', '—Å–≤–æ–∏—Ö': '—Å–≤–æ–π', '—Å–≤–æ–∏–º–∏': '—Å–≤–æ–π', '—Å–≤–æ—é': '—Å–≤–æ–π',
            // —Ç–∞–∫–æ–π
            '—Ç–∞–∫–æ–π': '—Ç–∞–∫–æ–π', '—Ç–∞–∫–∞—è': '—Ç–∞–∫–æ–π', '—Ç–∞–∫–æ–µ': '—Ç–∞–∫–æ–π', '—Ç–∞–∫–∏–µ': '—Ç–∞–∫–æ–π', '—Ç–∞–∫–æ–≥–æ': '—Ç–∞–∫–æ–π', '—Ç–∞–∫–æ–π-—Ç–æ': '—Ç–∞–∫–æ–π', '—Ç–∞–∫–æ–º—É': '—Ç–∞–∫–æ–π', '—Ç–∞–∫–∏–º': '—Ç–∞–∫–æ–π', '—Ç–∞–∫–æ–º': '—Ç–∞–∫–æ–π', '—Ç–∞–∫–∏—Ö': '—Ç–∞–∫–æ–π', '—Ç–∞–∫–∏–º–∏': '—Ç–∞–∫–æ–π', '—Ç–∞–∫—É—é': '—Ç–∞–∫–æ–π',
            // —Å–∞–º—ã–π –∏ —Å–∞–º
            '—Å–∞–º—ã–π': '—Å–∞–º—ã–π', '—Å–∞–º–∞—è': '—Å–∞–º—ã–π', '—Å–∞–º–æ–µ': '—Å–∞–º—ã–π', '—Å–∞–º—ã–µ': '—Å–∞–º—ã–π', '—Å–∞–º–æ–≥–æ': '—Å–∞–º—ã–π', '—Å–∞–º–æ–π': '—Å–∞–º—ã–π', '—Å–∞–º–æ–º—É': '—Å–∞–º—ã–π', '—Å–∞–º—ã–º': '—Å–∞–º—ã–π', '—Å–∞–º–æ–º': '—Å–∞–º—ã–π', '—Å–∞–º—ã—Ö': '—Å–∞–º—ã–π', '—Å–∞–º—ã–º–∏': '—Å–∞–º—ã–π', '—Å–∞–º—É—é': '—Å–∞–º—ã–π',
            '—Å–∞–º': '—Å–∞–º', '—Å–∞–º–∞': '—Å–∞–º', '—Å–∞–º–æ': '—Å–∞–º', '—Å–∞–º–∏': '—Å–∞–º', '—Å–∞–º–∏–º': '—Å–∞–º', '—Å–∞–º–∏—Ö': '—Å–∞–º', '—Å–∞–º–∏–º–∏': '—Å–∞–º', '—Å–∞–º—É': '—Å–∞–º',
            // –≤–æ–ø—Ä–æ—Å—ã/–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è (—á–∞—Å—Ç–∏—á–Ω—ã–µ)
            '–Ω–∏—á–µ–≥–æ': '–Ω–∏—á—Ç–æ', '–Ω–∏—á–µ–º—É': '–Ω–∏—á—Ç–æ', '–Ω–∏—á–µ–º': '–Ω–∏—á—Ç–æ', '–Ω–∏—á—ë–º': '–Ω–∏—á—Ç–æ', '–Ω–∏—á–µ–º-—Ç–æ': '–Ω–∏—á—Ç–æ',
            '—á–µ–≥–æ': '—á—Ç–æ', '—á–µ–º—É': '—á—Ç–æ', '—á–µ–º': '—á—Ç–æ', '—á—ë–º': '—á—Ç–æ', '–∫–æ–º—É': '–∫—Ç–æ', '–∫–æ–≥–æ': '–∫—Ç–æ', '–∫–µ–º': '–∫—Ç–æ', '–∫–æ–º': '–∫—Ç–æ',
            // —á–∞—Å—Ç—ã–µ –Ω–∞—Ä–µ—á–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞–¥–æ ‚Äú–æ–±—Ä–µ–∑–∞—Ç—å‚Äù
            '–ø—Ä—è–º–æ': '–ø—Ä—è–º–æ'
        };
        if (IRREGULAR[s]) return IRREGULAR[s];

        // Helper to return and count rule usage
        const ret = (value: string, rule: 'ruVerb'|'ruPartGer'|'ruAdj'|'ruNoun'|'ruFallback'): string => {
            try { this.counters[rule] = (this.counters[rule] || 0) + 1; } catch {}
            return value;
        };

        // Helper: choose infinitive ending based on last vowel in the stem and original suffix
        const chooseInf = (stem: string, originalSuffix: string, reflexive: boolean, hint?: '–∞—Ç—å'|'—è—Ç—å'|'–µ—Ç—å'|'–∏—Ç—å'): string => {
            const vowels = ['–∞','—è','–µ','–∏','–æ','—É','—ã','—é'];
            let lastVowel = '';
            for (let i = stem.length - 1; i >= 0; i--) {
                const ch = stem[i];
                if (vowels.includes(ch)) { lastVowel = ch; break; }
            }
            // Heuristic special-cases before generic vowel-based choice
            if (!hint) {
                // Many colloquial/obscene verbs with -–µ–±- take -–∞—Ç—å: –ø—Ä–æ–µ–±–∞—Ç—å/–Ω–∞–µ–±–∞—Ç—å
                if (/–µ–±$/.test(stem)) hint = '–∞—Ç—å';
            }
            let inf = hint || '–∏—Ç—å';
            if (lastVowel === '–∞') inf = '–∞—Ç—å';
            else if (lastVowel === '—è') inf = '—è—Ç—å';
            else if (lastVowel === '–µ') inf = '–µ—Ç—å';
            else if (lastVowel === '–∏' || lastVowel === '—ã') inf = '–∏—Ç—å';
            else if (['—É—Ç','—é—Ç','–∞—Ç','—è—Ç','–µ—Ç','–µ—à—å','–µ–º','–µ—Ç–µ'].includes(originalSuffix)) {
                // For 1st conjugation hints, prefer -–∞—Ç—å if we don't see a clear -–∏—Ç—å signal
                if (!hint) inf = (lastVowel === '–∏') ? '–∏—Ç—å' : '–∞—Ç—å';
            }
            let res = stem + inf;
            if (reflexive) res = res.replace(/—Ç—å$/, '—Ç—å—Å—è');
            return res;
        };

        // Handle reflexive marker upfront
        let hadReflexive = false;
        if (/(—Å—è|—Å—å)$/.test(s)) {
            hadReflexive = true;
            s = s.replace(/(—Å—è|—Å—å)$/, '');
        }

        // Try participles and gerunds ‚Üí verb infinitive
        // Present active participles: -—É—â-/-—é—â- + adjective endings
        const stripToVerbByPattern = (str: string): string | null => {
            const tryReturn = (stem: string) => stem.length >= 2 ? (hadReflexive ? stem + '—Ç—å—Å—è' : stem + '—Ç—å') : null;
            // -–≤—à–∏ / -–≤ (–ø—Ä–æ—á–∏—Ç–∞–≤—à–∏ ‚Üí –ø—Ä–æ—á–∏—Ç–∞—Ç—å, –ø—Ä–æ—á–∏—Ç–∞–≤ ‚Üí –ø—Ä–æ—á–∏—Ç–∞—Ç—å)
            if (/–≤—à–∏$/.test(str)) {
                const stem = str.replace(/–≤—à–∏$/, '');
                const res = tryReturn(stem);
                if (res) return res;
            }
            if (/[^–∞–µ–∏–æ—É—ã—ç—é—è]–≤$/.test(str) || /[–∞–µ–∏–æ—É—ã—ç—é—è]–≤$/.test(str)) {
                const stem = str.replace(/–≤$/, '');
                const res = tryReturn(stem);
                if (res) return res;
            }
            // -—É—â-/-—é—â- participles (—á–∏—Ç–∞—é—â–∏–π ‚Üí —á–∏—Ç–∞—Ç—å)
            if (/(—É|—é)—â[–∞-—è]*$/.test(str)) {
                const stem = str.replace(/(—É|—é)—â[–∞-—è]*$/, '');
                const res = tryReturn(stem);
                if (res) return res;
            }
            // Passive participles: -–µ–Ω–Ω-/-—ë–Ω–Ω-/-–∞–Ω–Ω-/-—è–Ω–Ω- + endings
            if (/(–µ–Ω–Ω|—ë–Ω–Ω|–∞–Ω–Ω|—è–Ω–Ω)[–∞-—è]*$/.test(str)) {
                const stem = str.replace(/(–µ–Ω–Ω|—ë–Ω–Ω|–∞–Ω–Ω|—è–Ω–Ω)[–∞-—è]*$/, '');
                const res = tryReturn(stem);
                if (res) return res;
            }
            return null;
        };
    const fromPartGer = stripToVerbByPattern(s);
    if (fromPartGer) return ret(fromPartGer, 'ruPartGer');

        // Verb forms ‚Üí infinitive
        const verbSuffixes = ['–µ—à—å','–µ—Ç','–µ–º','–µ—Ç–µ','—é—Ç','—É—Ç','–∞—Ç','—è—Ç','–∏—à—å','–∏—Ç','–∏–º','–∏—Ç–µ','–∞–ª','–∞–ª–∞','–∞–ª–æ','–∞–ª–∏','–ª','–Ω—É—Ç'];
        for (const suf of verbSuffixes) {
            if (s.length > suf.length + 1 && s.endsWith(suf)) {
                let stem = s.slice(0, -suf.length);
                if (stem.length >= 2) {
                    // Special: -–Ω—É—Ç (–∫—Ä–∏–∫–Ω—É—Ç ‚Üí –∫—Ä–∏–∫–Ω—É—Ç—å)
                    if (suf === '–Ω—É—Ç') {
                        const res = stem + '–Ω—É—Ç—å';
                        return ret(hadReflexive ? res.replace(/—Ç—å$/, '—Ç—å—Å—è') : res, 'ruVerb');
                    }
                    // Consonant alternations before -—É—Ç/-—é—Ç (–ø–∏—à—É—Ç‚Üí–ø–∏—Å–∞—Ç—å, —Ä–µ–∂—É—Ç‚Üí—Ä–µ–∑–∞—Ç—å)
                    if ((suf === '—É—Ç' || suf === '—é—Ç') && /[—à–∂]$/.test(stem)) {
                        stem = stem.replace(/—à$/, '—Å').replace(/–∂$/, '–∑');
                        return ret(chooseInf(stem, suf, hadReflexive, '–∞—Ç—å'), 'ruVerb');
                    }
                    // Heuristic: stems ending with -–ª before -—è—Ç (–≥—É–≥–ª—è—Ç/—Ä–æ—Ñ–ª—è—Ç ‚Üí -–∏—Ç—å)
                    if (suf === '—è—Ç' && /–ª$/.test(stem)) {
                        return ret(chooseInf(stem, suf, hadReflexive, '–∏—Ç—å'), 'ruVerb');
                    }
                    // Default heuristic
                    return ret(chooseInf(stem, suf, hadReflexive), 'ruVerb');
                }
            }
        }
        // Special: already infinitive '—Ç—å—Å—è' or '—Ç—å'
        if (s.endsWith('—Ç—å—Å—è')) return ret(s, 'ruVerb'); // already reflexive infinitive
        if (s.endsWith('—Ç—å')) return ret(s, 'ruVerb');   // already infinitive

        // Adjectives ‚Üí masculine nominative singular (-—ã–π/-–∏–π/-–æ–π)
        const adjEndings = [
            '–∞—è','—è—è','–æ–µ','–µ–µ','—ã–µ','–∏–µ','–æ–≥–æ','–µ–≥–æ','–æ–º—É','–µ–º—É','—ã–º','–∏–º','—ã—Ö','–∏—Ö','–æ–π','–µ–π','—É—é','—é—é','–æ–º','–µ–º'
        ];
        for (const end of adjEndings) {
            if (s.length > end.length + 1 && s.endsWith(end)) {
                const stem = s.slice(0, -end.length);
                if (stem.length >= 2) {
                    // Heuristic to choose -–∏–π vs -—ã–π: soft stems and historically -–∏–π adjectives prefer -–∏–π
                    const softStem = /[–π—å–∂—á—à—â]$/.test(stem) || /–Ω–∏–Ω$/.test(stem) || /—Å–∏–Ω$/.test(stem);
                    const masculine = softStem ? stem + '–∏–π' : stem + '—ã–π';
                    return ret(masculine, 'ruAdj');
                }
            }
        }

        // Noun/adjective common case recovery to nominative singular
        // Specific productive patterns first
        // e.g., –∫–æ–ø–µ–µ–∫ -> –∫–æ–ø–µ–π–∫–∞ (‚Ä¶–µ–µ–∫ ‚Üí ‚Ä¶–µ–π–∫–∞)
        if (/^[–∞-—è]+–µ–µ–∫$/.test(s)) {
            const base = s.replace(/–µ–µ–∫$/, '–µ–π–∫–∞');
            if (base.length >= 3) return ret(base, 'ruNoun');
        }
        // —Å—ã–Ω–æ–≤—å—è-* ‚Üí —Å—ã–Ω
        if (/^—Å—ã–Ω–æ–≤—å—è(–º–∏|–º|—Ö)?$/.test(s) || /^—Å—ã–Ω–æ–≤(–µ–π|—è–º|—å—é|—è—Ö)$/.test(s)) {
            return ret('—Å—ã–Ω', 'ruNoun');
        }
        // –¥–≤–µ—Ä–µ–π -> –¥–≤–µ—Ä—å (‚Ä¶—Ä + –µ–π ‚Üí ‚Ä¶—Ä—å)
        if (s.endsWith('–µ–π')) {
            const stem = s.slice(0, -2);
            if (/—Ä$/.test(stem)) {
                const cand = stem + '—å';
                if (cand.length >= 2) return ret(cand, 'ruNoun');
            }
        }
        // Productive diminutive plural patterns: –¥–µ–≤–æ—á–µ–∫ ‚Üí –¥–µ–≤–æ—á–∫–∞; –∑–∞–π—á–∏–∫–æ–≤? (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ –¥–ª—è -–æ—á–∫–∞/-–µ—á–∫–∞/-—É—à–∫–∞)
        const diminutiveMap: Array<[RegExp, string]> = [
            [/–æ—á–µ–∫$/,'–æ—á–∫–∞'],
            [/–µ—á–µ–∫$/,'–µ—á–∫–∞'],
            [/—É—à–µ–∫$/,'—É—à–∫–∞'],
            [/—é—à–µ–∫$/,'—é—à–∫–∞'],
            [/—à–µ–∫$/,'—à–∫–∞'] // keep last (most general)
        ];
        for (const [re, repl] of diminutiveMap) {
            if (re.test(s) && s.length > 4) {
                const base = s.replace(re, repl);
                if (base.length >= 3) return ret(base, 'ruNoun');
            }
        }
        // Handle -—Ü–∏—è nouns explicitly (–ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏–∏ ‚Üí –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è)
        const tsiaToTsiya: string[] = ['—Ü–∏–µ–π','—Ü–∏—é','—Ü–∏–∏','—Ü–∏–π','—Ü–∞–º','—Ü–∞–º–∏','—Ü–∏—è—Ö'];
        for (const end of tsiaToTsiya) {
            if (s.length > end.length + 1 && s.endsWith(end)) {
                const base = s.slice(0, -end.length) + '—Ü–∏—è';
                if (base.length >= 3) return ret(base, 'ruNoun');
            }
        }
        // Patterns for -–∏—è nouns
        const iaPatterns: Array<[string,string]> = [
            ['–∏–∏','–∏—è'], ['–∏–µ–π','–∏—è'], ['–∏—é','–∏—è'], ['–∏–µ','–∏–µ']
        ];
        for (const [end, repl] of iaPatterns) {
            if (s.length > end.length + 1 && s.endsWith(end)) {
                const base = s.slice(0, -end.length) + repl;
                if (base.length >= 3) return ret(base, 'ruNoun');
            }
        }
        // Simple case endings for -a/-—è/-–æ/-–µ nouns and adjectives
        const caseEnds: string[] = [
            '–∞–º–∏','—è–º–∏','–∞–º–∏','—è—Ö','–∞—Ö','–∞–º','—è–º','–æ—é','–µ—é','–æ–π','–µ–π','—É—é','—é—é','—ã—Ö','–∏—Ö','—ã–º','–∏–º','–æ–º','–µ–º','—É','—é','–µ','–∞','—è'
        ];
        for (const end of caseEnds) {
            if (s.length > end.length + 1 && s.endsWith(end)) {
                const base = s.slice(0, -end.length);
                if (base.length >= 3) return ret(base, 'ruNoun');
            }
        }

        // Keep adverbs ending in -–æ/-–µ as-is when no better rule matched (e.g., "–ø—Ä—è–º–æ", "—Ç–∏—Ö–æ")
        if ((/[–∞–µ—ë–∏–æ—É—ã—ç—é—è]–æ$/.test(s) || /[–∞–µ—ë–∏–æ—É—ã—ç—é—è]–µ$/.test(s)) && s.length > 3) {
            return ret(s, 'ruFallback');
        }

        // Final fallback: drop a single trailing vowel/soft sign
        if (/[–∞–µ—ë–∏–æ—É—ã—ç—é—è—å]$/.test(s) && s.length > 3) {
            return ret(s.slice(0, -1), 'ruFallback');
        }
        return ret(s, 'ruFallback');
    }

    /** Update options from caller */
    setOptions(opts: any) {
        this.options = Object.assign({}, this.options, opts || {});
    }
}
